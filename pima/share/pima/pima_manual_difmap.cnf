device /XW
vflags="fb3"

integer clean_niter; clean_niter = 100
float   clean_gain; clean_gain = 0.03
float   dynam;  dynam = 6.0
float   soltime1; soltime1 = 800000
float   soltime2; soltime2 = 15
float   soltime3; soltime3 = 1
float   thresh; thresh = 0.5
float   win_mult; win_mult = 1.8
float   taper_size; taper_size = 70.
integer field_size; field_size = 1024
float   field_cell; field_cell = 0.1

!
! --- Define the inner loop as a macro.
!

float old_peak
float new_peak
float flux_cutoff

!
!  map_residual is an auxilliary procedure used by amap
!
#+map_residual \
  flux_cutoff = imstat(rms) * dynam;\
  repeat;\
  if ( peak(flux) > flux_cutoff) peakwin win_mult;\
       clean clean_niter,clean_gain;\
       flux_cutoff = imstat(rms) * dynam;\
       selfcal;\
       new_peak = peak(flux);\
  until(new_peak<=flux_cutoff)

!
!  map_noselfcal is an auxilliary procedure used by amap
!
#+map_noselfcal \
flux_cutoff = imstat(rms) * dynam;\
repeat;\
 if (peak(flux) > flux_cutoff) peakwin win_mult;\
 clean clean_niter,clean_gain;\
 flux_cutoff = imstat(rms) * dynam;\
 keep;\
 new_peak = peak(flux);\
until(new_peak<=flux_cutoff)

!
! -- amap -- automatic imaging
!
#+amap \
    uvw 2,-1 ;\
    map_residual ;\
    print "=== Finished uniform weighting clean ===" ;\
    uvw 0,-1 ;\
    win_mult = win_mult * 1.6 ;\
    clean_niter = clean_niter * 2 ;\
    dynam = dynam - 0.5 ;\
    map_residual ;\
    print "=== Finished natural weighting clean ===" ;\
    gscale true ;\
    dynam = dynam - 0.5 ;\
    map_residual ;\
    selfcal true, true, soltime1 ;\
    dynam = dynam - 0.75 ;\
    clean clean_niter,clean_gain ;\
    selfcal ;\
    map_residual ;\
    selfcal true, true, soltime2 ;\
    clean clean_niter,clean_gain ;\
    selfcal ;\
    map_residual ;\
    uvtaper 0.3,taper_size ;\
    win_mult = win_mult * 1.2 ;\
    selfcal true, true, soltime3 ;\
    clean clean_niter,clean_gain ;\
    selfcal ;\
    map_residual ;\
    uvtaper 0,0 ;\
    win_mult = win_mult / 1.2 ;\
    restore ;\
    if ( peak(flux) > thresh ) ;\
         selfcal true, true ;\
         clean clean_niter,clean_gain ;\
         selfcal ;\
         map_residual ;\
         selfcal true, true ;\
    end if ;\
    print "=== Clearing model and starting over ===" ;\
    clrmod true ;\
    uvw 2,-1 ;\
    clean clean_niter,clean_gain ;\
    uvw 0,-1 ;\
    map_noselfcal ;\
    uvtaper 0.3,taper_size ;\
    clean clean_niter,clean_gain ;\
    map_noselfcal ;\
    uvtaper 0,0 ;\
    clean  ;\
    selfcal

!
!=======================================================================
!
!
!
! A family of commands for selecting the IFs, selecting I Stokes polarization,
! setting the field size, setting the taper size, running startmod,
! and executing radplot. 
!
! bq -- load Q-band image
! bk -- load K-band image
! bu -- load U-band image
! bx -- load X-band image
! bc -- load C-band image
! bs -- load S-band image
! bl -- load L-band image
!

#+Bu sele I; field_size=1024; field_cell=0.0167; taper_size = 90.0; \
     mapsize field_size,field_cell; \
     startmod; \
     radplot

#+Bk sele I; field_size=1024; field_cell=0.0333; taper_size = 90.0; \
     mapsize field_size,field_cell; \
     startmod; \
     radplot

#+Bu sele I; field_size=1024; field_cell=0.05; taper_size = 70.0; \
     mapsize field_size,field_cell; \
     startmod; \
     radplot

#+Bx sele I; field_size=1024; field_cell=0.1; taper_size = 70.0; \
     mapsize field_size,field_cell; \
     startmod; \
     radplot

#+Bc sele I; field_size=1024; field_cell=0.2; taper_size = 50.0; \
     mapsize field_size,field_cell; \
     startmod; \
     radplot

#+Bs sele I; field_size=1024; field_cell=0.4; taper_size = 50.0; \
     mapsize field_size,field_cell; \
     startmod; \
     radplot

#+Bl sele I; field_size=1024; field_cell=0.75; taper_size = 50.0; \
     mapsize field_size,field_cell; \
     startmod; \
     radplot

!
!  Averging (in seconds)
!

#+A4   uvaver 4
#+A15  uvaver 15
#+A60  uvaver 60
#+A120 uvaver 120
#+AA   uvaver 600


!
! --- Running initial imaging and displaying residuals
!
!
#+Ii uvw 2,-1; clrmod true,true; clean  200, 0.02; mapl  map,true

!
! A family of commands for running phase self-calibration loop.
! It executes the following steps:
!    1) clear the model;
!    2) execute phase self-calibration;
!    3) set uniform weighting
!    4) run clean 
!    5) set natural weigting
!    6) run clean
!    7) display map of residuals in grey scale
!
! The commands differen by the number of clean iteratins and the gain factor
!
! C1  -- the weakest clean
! C2  -- stronger clean
! C3  -- even sronger clean
!
! ...
!
! C14 -- the strongest clean
!

#+C1  clrmod true,true; selfcal; uvw 2,-1; clean   800, 0.01;  uvw 0,-2; clean  1200, 0.01;  mapcol grey; mapl map,true
#+C2  clrmod true,true; selfcal; uvw 2,-1; clean  1200, 0.01;  uvw 0,-2; clean  2000, 0.01;  mapcol grey; mapl map,true
#+C3  clrmod true,true; selfcal; uvw 2,-1; clean  1600, 0.01;  uvw 0,-2; clean  2400, 0.01;  mapcol grey; mapl map,true
#+C4  clrmod true,true; selfcal; uvw 2,-1; clean  1600, 0.015; uvw 0,-2; clean  2400, 0.015; mapcol grey; mapl map,true
#+C5  clrmod true,true; selfcal; uvw 2,-1; clean  1600, 0.020; uvw 0,-2; clean  2400, 0.020; mapcol grey; mapl map,true
#+C6  clrmod true,true; selfcal; uvw 2,-1; clean  2400, 0.020; uvw 0,-2; clean  4000, 0.020; mapcol grey; mapl map,true
#+C7  clrmod true,true; selfcal; uvw 2,-1; clean  4000, 0.020; uvw 0,-2; clean  6000, 0.020; mapcol grey; mapl map,true
#+C8  clrmod true,true; selfcal; uvw 2,-1; clean  5000, 0.020; uvw 0,-2; clean  8000, 0.020; mapcol grey; mapl map,true
#+C9  clrmod true,true; selfcal; uvw 2,-1; clean  6000, 0.020; uvw 0,-2; clean 10000, 0.020; mapcol grey; mapl map,true
#+C10 clrmod true,true; selfcal; uvw 2,-1; clean  8000, 0.020; uvw 0,-2; clean 12000, 0.020; mapcol grey; mapl map,true
#+C11 clrmod true,true; selfcal; uvw 2,-1; clean 10000, 0.020; uvw 0,-2; clean 14000, 0.020; mapcol grey; mapl map,true
#+C12 clrmod true,true; selfcal; uvw 2,-1; clean 12000, 0.020; uvw 0,-2; clean 16000, 0.020; mapcol grey; mapl map,true
#+C13 clrmod true,true; selfcal; uvw 2,-1; clean 15000, 0.020; uvw 0,-2; clean 20000, 0.020; mapcol grey; mapl map,true
#+C14 clrmod true,true; selfcal; uvw 2,-1; clean 18000, 0.020; uvw 0,-2; clean 20000, 0.020; mapcol grey; mapl map,true

!
! A family of commands for running amplitude self-calibration
!
! U0 -- a gentle amplitude self-calibration over the entire dataset
!       Self-calibration amplutude correction is limited to 1.2
!
! U1 -- amplitude self-calibration over the entire dataset.
!       Self-calibration amplutude correction is limited to 2
!
! U2 -- amplitude self-calibration over 10 minute solution interval
!       Self-calibration amplutude correction is limited to 2
!
! U3 -- amplitude self-calibration over  2 minute solution interval
!       Self-calibration amplutude correction is limited to 2
!

#+U0 selflim 1.2; uncalib; selfcal; selfcal true,true,1.e6
#+U1 selflim 2.0; uncalib; selfcal; selfcal true,true,1.e6
#+U2 selflim 2.0; uncalib; selfcal; selfcal true,true,10.
#+U3 selflim 2.0; uncalib; selfcal; selfcal true,true,2.
!
#+U1A selflim 5.0; uncalib; selfcal; selfcal true,true,1.e6
#+U2A selflim 5.0; uncalib; selfcal; selfcal true,true,10.
#+U3A selflim 5.0; uncalib; selfcal; selfcal true,true,2.

!
! UF -- undo flagging for a given station
!
#+UF unflag %1; uncalib false, false, true

!
! UF -- undo flagging for all the stations
!
#+UFA unflag *; uncalib false, false, true

!
! UA -- undo amplutde self-calibration
!
#+UA uncalib false,true,false

!
! UN -- undo antenna based flagging
!
#+UN uncalib false, false, true

!
! A family of commands for displaying map
! The differ by the number of levels
!
! L1 -- Default map.         The number of levels:  6
! LA -- Coarser map than L1. The number of levels:  5
! LB -- Coarser map than LA. The number of levels:  4
! L2 -- Finer   map than L1. The number of levels:  7
! L3 -- Finer   map than L2. The number of levels:  8
! L4 -- Finer   map than L3. The number of levels:  9
! L5 -- Finer   map than L4. The number of levels: 10
! L6 -- Finer   map than L5. The number of levels: 11
! L7 -- Finer   map than L6. The number of levels: 12
!
!

#+LB levs=6.25,12.5,25.0,50.0; mapcol color; mapl cln; mapcol grey
#+LA levs=3.125,6.25,12.5,25.0,50.0; mapcol color; mapl cln; mapcol grey
#+L1 levs=1.563,3.125,6.25,12.5,25.0,50.0; mapcol color; mapl cln; mapcol grey
#+L2 levs=0.75,1.5,3.0,6.0,12,25.0,50.0; mapcol color; mapl cln; mapcol grey
#+L3 levs=0.4,0.8,1.6,3.2,6.4,12.5,25.0,50.0; mapcol color; mapl cln; mapcol grey
#+L4 levs=0.2,0.4,0.8,1.6,3.2,6.4,12.5,25.0,50.0; mapcol color; mapl cln; mapcol grey
#+L5 levs=0.1,0.2,0.4,0.8,1.6,3.2,6.4,12.5,25.0,50.0; mapcol color; mapl cln; mapcol grey
#+L6 levs=0.05,0.1,0.2,0.4,0.8,1.6,3.2,6.4,12.5,25.0,50.0; mapcol color; mapl cln; mapcol grey
#+L7 levs=0.025,0.05,0.1,0.2,0.4,0.8,1.6,3.2,6.4,12.5,25.0,50.0; mapcol color; mapl cln; mapcol grey

#+M1 mapl map,true

! A set of commands for making the final cleanup ("best map").
! This is hte last command. It creates the box for the entire
! area and clean it.
! bmap -- default size
! b2   -- 2x default size
! b4   -- 4x default size
!
! ...
!
! b64  -- 64x default size

#+bmap \
    x = (field_size-8) * field_cell / 4 ;\
    addwin -x,x,-x,x ;\
    clean (field_size*4),0.01

#+b2 \
    x = (field_size-8) * field_cell / 2 ;\
    addwin -x,x,-x,x ;\
    clean (field_size*4),0.01

#+b4 \
    x = (field_size-8) * field_cell ;\
    addwin -x,x,-x,x ;\
    clean (field_size*4),0.01

#+b8 \
    x = (field_size-16) * field_cell*2 ;\
    addwin -x,x,-x,x ;\
    clean (field_size*4),0.01

#+b16 \
    x = (field_size-32) * field_cell*4 ;\
    addwin -x,x,-x,x ;\
    clean (field_size*4),0.01

#+b32 \
    x = (field_size-64) * field_cell*8 ;\
    addwin -x,x,-x,x ;\
    clean (field_size*8),0.01

#+b64 \
    x = (field_size-128) * field_cell*16 ;\
    addwin -x,x,-x,x ;\
    clean (field_size*16),0.01

!
! A set of commands for making the semi-final cleanup ("best map").
! The number of clean-up iterations is limited to 512
! This command is used for an image with sparse uv-coverage that using
! bmap elevates the noise level abnd creates spurious features.
!
! cmap   -- default size
! c2map  -- 2x defualt size
! c4map  -- 4x default size
!
! ...
!
! c64map -- 64x default size
!

#+cmap \
    x = (field_size-8) * field_cell / 4 ;\
    addwin -x,x,-x,x ;\
    clean (512),0.01


#+c2map \
    x = (field_size-8) * field_cell / 2 ;\
    addwin -x,x,-x,x ;\
    clean (512),0.01

#+c4map \
    x = (field_size-8) * field_cell  ;\
    addwin -x,x,-x,x ;\
    clean (512),0.01

#+c8map \
    x = (field_size-16) * field_cell*2  ;\
    addwin -x,x,-x,x ;\
    clean (512),0.01

#+c16map \
    x = (field_size-32) * field_cell*4  ;\
    addwin -x,x,-x,x ;\
    clean (512),0.01

#+c32map \
    x = (field_size-64) * field_cell*8  ;\
    addwin -x,x,-x,x ;\
    clean (512),0.01

#+c64map \
    x = (field_size-128) * field_cell*16  ;\
    addwin -x,x,-x,x ;\
    clean (512),0.01


!
! A set of commands for making the semi-semi-final cleanup ("best map").
! The number of clean-up iterations is limited to 256
! This command is used for an image with sparse uv-coverage that using
! bmap elevates the noise level abnd creates spurious features.
!
! dmap   -- default size
! d2map  -- 2x defualt size
! d4map  -- 4x default size
!
! ...
!
! d64map -- 64x default size
!

#+dmap \
    x = (field_size-8) * field_cell / 4 ;\
    addwin -x,x,-x,x ;\
    clean (256),0.01

#+d2map \
    x = (field_size-8) * field_cell / 2 ;\
    addwin -x,x,-x,x ;\
    clean (256),0.01

#+d4map \
    x = (field_size-8) * field_cell ;\
    addwin -x,x,-x,x ;\
    clean (256),0.01
