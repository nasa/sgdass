*----------------------- begin $FREQ        ----------------------*
$FREQ;
*
def 8409.00MHz4x16MHz;
* mode =  1    stations =Pa:Ho:45
     sample_rate = 32.000 Ms/sec;  * (2bits/sample)
     chan_def = :  8409.00 MHz : U :16.000 MHz : &CH01 : &BBC02 : &NoCal; *Rcp
     chan_def = :  8425.00 MHz : U :16.000 MHz : &CH02 : &BBC04 : &NoCal; *Rcp
     chan_def = :  8665.00 MHz : U :16.000 MHz : &CH03 : &BBC06 : &NoCal; *Rcp
     chan_def = :  8681.00 MHz : U :16.000 MHz : &CH04 : &BBC08 : &NoCal; *Rcp
enddef;
*
def 8409.00MHz2x16MHz;
* mode =  1    stations =At:Mp:Cd
     sample_rate = 32.000 Ms/sec;  * (2bits/sample)
     chan_def = :  8409.00 MHz : U :16.000 MHz : &CH01 : &BBC01 : &NoCal; *Rcp
     chan_def = :  8425.00 MHz : U :16.000 MHz : &CH02 : &BBC01 : &NoCal; *Rcp
     chan_def = :  8665.00 MHz : U :16.000 MHz : &CH03 : &BBC02 : &NoCal; *Rcp
     chan_def = :  8681.00 MHz : U :16.000 MHz : &CH04 : &BBC02 : &NoCal; *Rcp
enddef;
*----------------------- end   $FREQ        ----------------------*
*----------------------- begin $IF          ----------------------*
$IF;
*
def LO@8200MHzRPolNoTone;
* mode =  1    stations =Pa:45
     if_def = &IF_2N : 2N : R :  8200.0 MHz : U ; * PCall off!
enddef;
*
def LO@8280MHzRPolNoTone;
* mode =  1    stations =Ho
     if_def = &IF_2N : 2N : R :  8280.0 MHz : U ; * PCall off!
enddef;
*
def LO@7800MHzRPolNoTone;
* mode =  1    stations =At:Mp
     if_def = &IF_2N : 2N : R :  7800.0 MHz : U ; * PCall off!
enddef;
*
def LO@7000MHzRPolNoTone;
* mode =  1    stations =Cd
     if_def = &IF_2N : 2N : R :  7000.0 MHz : U ; * PCall off!
enddef;
*----------------------- begin $IF          ----------------------*
*----------------------- end   $BBC         ----------------------*
$BBC;
*
def 4BBCs;
* mode =  1    stations =Pa:Ho:45
     BBC_assign = &BBC02 :  2 : &IF_2N;
     BBC_assign = &BBC04 :  4 : &IF_2N;
     BBC_assign = &BBC06 :  6 : &IF_2N;
     BBC_assign = &BBC08 :  8 : &IF_2N;
enddef;
*
def 2BBCs;
* mode =  1    stations =At:Mp:Cd
     BBC_assign = &BBC01 :  1 : &IF_2N;
     BBC_assign = &BBC02 :  1 : &IF_2N;
enddef;
*----------------------- end   $BBC         ----------------------*
*----------------------- begin $PHASE_CAL_DETECT -----------------*
$PHASE_CAL_DETECT;
*
def NoDetect;
* mode =  1    stations =Pa:Ho:45
     phase_cal_detect = &NoCal;
enddef;
*
def NoDetect#02;
* mode =  1    stations =At:Mp:Cd
     phase_cal_detect = &NoCal;
enddef;
*----------------------- end   $PHASE_CAL_DETECT -----------------*
*----------------------- begin $TRACKS           -----------------*
$TRACKS;
*
def MKIV.4Ch2bit1to4;
* mode =  1    stations =Pa:Ho:45
*    format = MKIV1:4, and fan-out = 4
*    mode requires  8.00Mb/s/tr; stations using disks
     track_frame_format = Mark4;
     data_modulation = off;
     fanout_def =   : &CH01 : sign : 1:  2:  4:  6:  8;
     fanout_def =   : &CH01 :  mag : 1: 10: 12: 14: 16;
     fanout_def =   : &CH02 : sign : 1: 18: 20: 22: 24;
     fanout_def =   : &CH02 :  mag : 1: 26: 28: 30: 32;
     fanout_def =   : &CH03 : sign : 1:  3:  5:  7:  9;
     fanout_def =   : &CH03 :  mag : 1: 11: 13: 15: 17;
     fanout_def =   : &CH04 : sign : 1: 19: 21: 23: 25;
     fanout_def =   : &CH04 :  mag : 1: 27: 29: 31: 33;
enddef;
*
def S2.32x4-2;
* mode =  1    stations =At:Mp:Cd
*    format = S2, and fan-out = 1
*    mode requires 32.00Mb/s/IF;
     S2_recording_mode = 32x4-2; * streams:IN00:IN01:IN02:IN03
     S2_data_source = none;
*    S2_record_source =obsolete, but:in00:in01:in02:in03
enddef;
*----------------------- end   $TRACKS           -----------------*
*----------------------- begin $HEAD_POS         -----------------*
$HEAD_POS;
def DiskVoid;
* mode =  1    stations =Pa:Ho:45
*     Head positions irrelevant for Disk: empty def
enddef;
def S2Void;
* mode =  1    stations =At:Mp:Cd
*     Head positions irrelevant for S2: empty definition
enddef;
*----------------------- end   $HEAD_POS         -----------------*
*----------------------- begin $PASS_ORDER       -----------------*
$PASS_ORDER;
*
def DiskVoid;
* mode =  1    stations =Pa:Ho
*     Pass orders irrelevant for Disk: empty def
enddef;
*
def S2with1Groups;
* mode =  1    stations =At:Mp:Cd
     S2_group_order = 0;
enddef;
*----------------------- end   $HEAD_POS         -----------------*
*----------------------- begin $ROLL             -----------------*
$ROLL;
*
def NoRoll;
* mode =  1    stations =Pa:At:Mp:Ho:Cd:45
*    barrel-roll set to 'roll_off', so reverse-roll by  0 (1 head)
     roll = off;
enddef;
*----------------------- end    $ROLL            -----------------*
*
