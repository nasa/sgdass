      SUBROUTINE MUL_MV_IV_V ( M1, N1, MAT, M2, VECI, M3, VECO, IUER )
C ************************************************************************
C *                                                                      *
C *   Subroutine  MUL_MV_IV_V  multiplies matrix by vector:              *
C *   VECO = MAT * VECI                                                  *
C *                                                                      *
C *  ###  10-Dec-96   MUL_MV_IV_V  v1.0  (c)  L. Petrov   10-Dec-96 ###  *
C *                                                                      *
C ************************************************************************
      IMPLICIT   NONE
      INTEGER*4  M1, N1, M2, M3, IUER
      REAL*8     MAT(M1,N1), VECI(M2), VECO(M3)
      CHARACTER  STR*80
C
      REAL*8     S
      INTEGER*4  J1, J2
      INTEGER*4  I_LEN, ILEN
C
      IF ( N1 .NE. M2 ) THEN
           CALL CLRCH ( STR )
           STR ='N1 .NE. M2  N1='
           CALL INCH ( N1, STR(I_LEN(STR)+1:) )
           STR(ILEN(STR)+2:) = 'M2='
           CALL INCH ( M2, STR(I_LEN(STR)+1:) )
           CALL ERR_LOG ( 12, IUER, 'MUL_MV_IV_V', STR )
           RETURN
      END IF
C
      IF ( M1 .NE. M3 ) THEN
           CALL CLRCH ( STR )
           STR = 'M1 .NE. M3  M1='
           CALL INCH ( M1, STR(I_LEN(STR)+1:) )
           STR(ILEN(STR)+2:) = 'M3='
           CALL INCH ( M3, STR(I_LEN(STR)+1:) )
           CALL ERR_LOG ( 14, IUER, 'MUL_MV_IV_V', STR )
           RETURN
      END IF
C
      DO 410 J1=1,M1
         S=0.0D0
         DO 420 J2=1,N1
            S = S + MAT(J1,J2)*VECI(J2)
 420     CONTINUE 
         VECO(J1) = S
 410  CONTINUE 
C
      CALL ERR_LOG ( 0, IUER,, )
      RETURN
      END  !#!  MUL_MV_IV_V  #!#
C
C ------------------------------------------------------------------------
C
      SUBROUTINE MUL_MV_SV_V ( M1, MAT, M2, VECI, M3, VECO, IUER )
C ************************************************************************
C *                                                                      *
C *   Subroutine  MUL_MV_SV_V  multiplies matrix by vector:              *
C *   VECO = MAT * VECI                                                  *
C *                                                                      *
C *  ###  10-Dec-96   MUL_MV_IV_V  v1.0  (c)  L. Petrov   10-Dec-96 ###  *
C *                                                                      *
C ************************************************************************
      IMPLICIT   NONE
      INTEGER*4  M1, M2, M3, IUER
      REAL*8     MAT(*), VECI(M2), VECO(M3)
      CHARACTER  STR*80
C
      REAL*8     S
      INTEGER*4  J1, J2, LC, I, J, LOC
      INTEGER*4  I_LEN, ILEN
      LOC(I,J)=min(I,J) +(max(I,J)*(max(I,J)-1))/2
C
      IF ( M1 .NE. M2 ) THEN
           CALL CLRCH ( STR )
           STR ='M1 .NE. M2  M1='
           CALL INCH ( M1, STR(I_LEN(STR)+1:) )
           STR(ILEN(STR)+2:) = 'M2='
           CALL INCH ( M2, STR(I_LEN(STR)+1:) )
           CALL ERR_LOG ( 12, IUER, 'MUL_MV_SV_V', STR )
           RETURN
      END IF
C
      IF ( M1 .NE. M3 ) THEN
           CALL CLRCH ( STR )
           STR = 'M1 .NE. M3  M1='
           CALL INCH ( M1, STR(I_LEN(STR)+1:) )
           STR(ILEN(STR)+2:) = 'M3='
           CALL INCH ( M3, STR(I_LEN(STR)+1:) )
           CALL ERR_LOG ( 14, IUER, 'MUL_MV_SV_V', STR )
           RETURN
      END IF
C
      DO 410 J1=1,M1
         S=0.0D0
         DO 420 J2=1,M1
            LC = LOC(J1,J2)
            S = S + MAT(LC)*VECI(J2)
 420     CONTINUE 
         VECO(J1) = S
 410  CONTINUE 
C
      CALL ERR_LOG ( 0, IUER,, )
      RETURN
      END  !#!  MUL_MV_SV_V  #!#
C
C ------------------------------------------------------------------------
C
      SUBROUTINE MUL_MV_TV_V ( M1, N1, MAT, M2, VECI, M3, VECO, IUER )
C ************************************************************************
C *                                                                      *
C *   Subroutine  MUL_MV_TV_V  multiplies matrix by vector:              *
C *   VECO = MAT * VECI                                                  *
C *                                                                      *
C *  ###  12-Dec-96   MUL_MV_TV_V  v1.0  (c)  L. Petrov   12-Dec-96 ###  *
C *                                                                      *
C ************************************************************************
      IMPLICIT   NONE
      INTEGER*4  M1, N1, M2, M3, IUER
      REAL*8     MAT(M1,N1), VECI(M2), VECO(M3)
      CHARACTER  STR*80
C
      REAL*8     S
      INTEGER*4  J1, J2
      INTEGER*4  I_LEN, ILEN
C
      IF ( M1 .NE. M2 ) THEN
           CALL CLRCH ( STR )
           STR ='M1 .NE. M2  M1='
           CALL INCH ( M1, STR(I_LEN(STR)+1:) )
           STR(ILEN(STR)+2:) = 'M2='
           CALL INCH ( M2, STR(I_LEN(STR)+1:) )
           CALL ERR_LOG ( 12, IUER, 'MUL_MV_TV_V', STR )
           RETURN
      END IF
C
      IF ( N1 .NE. M3 ) THEN
           CALL CLRCH ( STR )
           STR = 'N1 .NE. M3  N1='
           CALL INCH ( N1, STR(I_LEN(STR)+1:) )
           STR(ILEN(STR)+2:) = 'M3='
           CALL INCH ( M3, STR(I_LEN(STR)+1:) )
           CALL ERR_LOG ( 14, IUER, 'MUL_MV_TV_V', STR )
           RETURN
      END IF
C
      DO 410 J1=1,N1
         S=0.0D0
         DO 420 J2=1,M1
            S = S + MAT(J2,J1)*VECI(J2)
 420     CONTINUE 
         VECO(J1) = S
 410  CONTINUE 
C
      CALL ERR_LOG ( 0, IUER,, )
      RETURN
      END  !#!  MUL_MV_TV_V  #!#
C
C ------------------------------------------------------------------------
C
      SUBROUTINE MAT_SUMTRA ( L, MATI, MATO )
C ************************************************************************
C *                                                                      *
C *   Subroutime  MAT_SUMTRA  calculats summa MATI + MATI(T), where      *
C *   MATI is square martix in rectangular representation. MATO is       *
C *   square symmetric matrix in upper-diagonal representation.          *
C *                                                                      *
C *  ###  19-Dec-96   MAT_SUMTRA    V2.0 (c)  L. Petrov  18-DEC-96  ###  *
C *                                                                      *
C ************************************************************************
      IMPLICIT   NONE
      INTEGER*4  L
      REAL*8     MATI(L,L), MATO(*)
C
      REAL*8     S
      INTEGER*4  J1, J2, LC, I, J, LOC
      INTEGER*4  I_LEN, ILEN
      LOC(I,J) = min(I,J) +(max(I,J)*(max(I,J)-1))/2
C
      LC=0
      DO 410 J1=1,L
         DO 420 J2=1,J1
            LC=LC+1
            MATO(LC)=MATI(J1,J2) + MATI(J2,J1)
 420     CONTINUE
 410  CONTINUE
C
      RETURN
      END  !#!  MAT_SUMTRA  #!#
