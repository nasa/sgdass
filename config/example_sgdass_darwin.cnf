# sgdass_config  Version 1.4   of 2021.12.13
#
# Space Geodesy Data Analysis Software Suite configuration file on a MACOS 
# Tested under (Darwin) OS 13.5.2 and # xcode 14.2
# 
# 
# Last update: 2024.05.20_17:56:55
#
[Directories]
  dir:  /apr         # for apriori data. ~100 Gb
  dir:  /auto        # for automatization programs 1-10 Mb
  dir:  /cont        # for control files  10-100 Mb
  dir:  /dist        # for third-party package distributions 1-50 Gb
  dir:  /images      # for source images 150 Gb
  dir:  /image_orig  # for original source images 300 Gb
  dir:  /incoming    # for tar-balls 1-2 Gb
  dir:  /l0          # for Level 0  VLBI data. 5-500 Tb
  dir:  /l1a/        # for Level 1A VLBI data. 1-20 Tb
  dir:  /Users/lpetrov/l1b/        # for Level 1b VLBI data. 1-20 Tb
  dir:  /l2          # for Level 2  VLBI data. 50-100 Gb. Should be on a fast nvme
  dir:  /l3          # for Level 3  VLBI data. 1-10 Gb
  dir:  /logs        # for logs
  dir:  /opt64       # installation directory /opt64/lib should be in the LD_LIBRARY_PATH or in /etc/ld.so.conf
  dir:  /progs       # for in-house software packages 1-10 Gb
  dir:  /scr         # for scratch files 10-3000 Gb. Should be on a fast nvme
  dir:  /sde         # for single dish experiments
  dir:  /sol         # for solutions
  dir:  /vlbi        # for VLBI experiments
  dir:  /imls        # for IMLS data

[SubDirectories]:
  subdir: /apr/eop       # apriori Earth orientation paramers
  subdir: /apr/eph       # apriori ephemerides
  subdir: /apr/iono      # apriori ionosphere data
  subdir: /apr/load_bds  # apriori mass loading time series in bindisp format
  subdir: /apr/load_hps  # apriori mass loading harmonic variations
  subdir: /apr/psolve    # apriori files for psolve
  subdir: /apr/sou       # apriori source positions
  subdir: /apr/spd       # apriori station path delays
  subdir: /apr/sta       # apriori station positions
  subdir: /apr/temp      # apriori temporary files
  subdir: /l2/gvf        # Level 2 VLBI data in GVF format
  subdir: /l2/vda        # Level 2 VLBI data in vgosda format
  subdir: /l2/vdb        # Level 2 VLBI data in vgosdb format
  subdir: /logs/sgdass              # logs from sgdass installation
  subdir: /scr/pima                 # PIMA related files created during processing experiments.
  subdir: /scr/psolve               # temporary files created by psolve
  subdir: /scr/psolve/cgm_dir       # auxilliary combined glboal matrices created by psolve
  subdir: /scr/psolve/tpd           # auxilliary files with path delay created by psolve
  subdir: /scr/psolve/spool_dir     # listing of solutions generated by psolve
  subdir: /scr/psolve/sub_matrices  # auxilliary temporary files created by psolve
  subdir: /scr/psolve/work_dir      # auxilliary files by psolve
  subdir: /sol/heo                  # High frequency Earth Orientation parameter VLBI solutions
  subdir: /sol/qua                  # Quarterly VLBI solutions
  subdir: /sol/rewei                # Reweighting VLBI solutions
  subdir: /sol/rfc                  # astrometric VLBI solutions
  subdir: /vlbi/vtd_data            # data files for VTD
  subdir: /imls/oper_model          # IMLS operational models
  subdir: /imls/devel_model         # IMLS development models

[Compilers]
  gcc           /opt64/bin/gcc
  gcx           /opt64/bin/g++
  gfortran      /opt64/bin/gfortran
  cla           /usr/bin/clang
  clap          /usr/bin/clang++
  cmake         /opt64/bin/cmake

[Where]
  tarball       /progs/sgdass       # directory with unpacked sgdass tarballs
  build         /progs              # build directory the primary packages
  build_aux     /dist               # build directory for axilliary third party packages
  prefix        /opt64              # installation directory
  sdk           /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk  # Mac OS software development kit

[Misc]
  num_proc      8
  center_abr    NAS
  center_name  "NASA GSFC" 
  install_log   /logs/sgdass/sgdass_@DATE@_install.log
  build_log     /logs/sgdass/sgdass_@DATE@_build.log

#
# End of user customizatons
#
[Tests]
  package: petools      
  version: 20241115
           options:     --prefix=${prefix}                       \
                        --bits=64                                \
                        --short-test                             \
                        CC=${gcc}                                \
                        FC=${gfortran}
           build:       make short-test

[AuxPackages]

  package: pkg-config
  version: 0.29.2
           options:     --prefix=${prefix}              \
                        --with-internal-glib            \
                        --disable-host-tool             \
                        CC=${cla}                       \
                        CXX=${clap}                     \
                        CFLAGS="-Wno-int-conversion"    \
                        CXXFLAGS="-Wno-int-conversion" 
           build:       make clean
           build:       make -j ${num_proc} V=4
           build:       make install

#
  package: lzlib
  version: 1.13
           options:     --prefix=${prefix} \
                        --enable-shared    \
                        --disable-ldconfig \
                        CC=${gcc}
           post_config: sed -i -e 's@-Wl,--soname=lib$(libname).so.$(soversion)@@g' Makefile
           build:       make -j ${num_proc}
           build:       make install

#
  package: zlib
  version: 1.3.1
           options:     --prefix=${prefix}
           post_config: sed -i -e 's@cp $(SHAREDLIBV) $(DESTDIR)$(sharedlibdir);@cp $(SHAREDLIBV) $(DESTDIR)$(sharedlibdir)/$(SHAREDLIBV)__ ; mv $(DESTDIR)$(sharedlibdir)/$(SHAREDLIBV)__ $(DESTDIR)$(sharedlibdir)/$(SHAREDLIBV) ;@g' Makefile
           post_config: sed -i -e 's@cp $(SHAREDLIBV) $(DESTDIR)$(sharedlibdir);@cp $(SHAREDLIBV) $(DESTDIR)$(sharedlibdir)/$(SHAREDLIBV)__ ; mv $(DESTDIR)$(sharedlibdir)/$(SHAREDLIBV)__ $(DESTDIR)$(sharedlibdir)/$(SHAREDLIBV) ;@g' Makefile
           post_config: sed -i -e 's@CFLAGS=-O3 @CFLAGS=-O3 -fPIC @g' Makefile
           post_config: sed -i -e 's@CFLAGS=-O @CFLAGS=-O3 -fPIC @g'  Makefile
           post_config: sed -i -e 's@SFLAGS=-O3 @SFLAGS=-O3 -fPIC @g' Makefile
           post_config: sed -i -e 's@SFLAGS=-O @SFLAGS=-O3 -fPIC @g'  Makefile
           build:       make clean
           build:       make -j ${num_proc}
           build:       make install
           build:       ${gcc} -fpic -shared -Wl,-force_load ${prefix}/lib/libz.a -o ${prefix}/lib/libz.1.dylib
           build:       if ( -f ${prefix}/lib/libz.dylib    )  rm ${prefix}/lib/libz.dylib
           build:       ln -s ${prefix}/lib/libz.1.dylib          ${prefix}/lib/libz.dylib

#
  package: bzip2
  version: 1.0.8
           build:       sed -i -e "s@CC=gcc@CC=${gcc}@g"                    Makefile
           build:       sed -i -e "s@PREFIX=/usr/local@PREFIX=${prefix}@g"  Makefile
           build:       sed -i -e "s@PREFIX=/usr@PREFIX=${prefix}@g"        Makefile
           build:       sed -i -e "s@-Wall -Winline@-Wall -fPIC -Winline@g" Makefile
           build:       make clean
           build:       make -j ${num_proc}
           build:       make install

#
  package: lbzip2
  version: 2.5
           patch:       lbzip2-01.patch
           options:     --prefix=${prefix}           \
                        CC=${gcc}                    \
                        CFLAGS="-I${prefix}/include" \
                        LDLAGS="-L${prefix}/lib"     \
           build:       make clean
           build:       make -j ${num_proc}
           build:       make install

#
  package: xz
  version: 5.2.5
           options:     --prefix=${prefix}           \
                        CC=${gcc}                    \
                        CFLAGS="-I${prefix}/include" \
                        LDLAGS="-L${prefix}/lib"     \
           build:       make -j ${num_proc}
           build:       make install

#
  package: ncurses
  version: 6.4
           options:     --prefix=${prefix}  \
                        --with-shared       \
                        --without-debug     \
                        --without-ada       \
                        --enable-overwrite  \
                        CC=${gcc}           \
                        CXX=${gcx}
           build:       make -j ${num_proc}
           build:       make install

#
  package: readline
  version: 8.2
           options:     --prefix=${prefix} \
                        --with-curses      \
                        --disable-shared   \
                        CCFLAGS="-I${prefix}/include" \
                        LDFLAGS="-L${prefix}/lib"     \
                        CFLAGS="-m64 -fPIC"           \
                        CC=${gcc}
           build:       make -j ${num_proc}
           build:       make install

#
  package: autoconf
  version: 2.71
           options:     --prefix=${prefix} \
                        CC=${gcc}
           build:       make -j ${num_proc}
           build:       make install

#
  package: automake
  version: 1.16.5
           options:     --prefix=${prefix} \
                        CC=${gcc}          \
                        CXX=${gcx}         \
                        FC=${gfortran}
           build:       make -j ${num_proc}
           build:       make install

#
  package: libtool
  version: 2.4.7
           pre_config:  chmod u+rw build-aux/ltmain.sh
           pre_config:  sed -i -e 's@$SED -e "$basename" | sort -u@$SED -e "$sed_basename" | sort -u@g' build-aux/ltmain.sh
           pre_config:  /usr/bin/touch doc/libtool.1
           options:     --prefix=${prefix}            \
                        --disable-dependency-tracking \
                        --program-prefix=g            \
                        --disable-ltdl-install        \
                        CC=${gcc}                     \
                        CXX=${gcx}                    \
                        FC=${gfortran}
           build:       make -j ${num_proc}
           build:       make install

#
  package: openssl
  version: 1.1.1u
           options:     --prefix=${prefix} \
                        shared             \
                        zlib-dynamic       \
                        CC=${gcc}
           build:       make -j ${num_proc}
           build:       sed -i -e '/INSTALL_LIBS/s/libcrypto.a libssl.a//' Makefile
           build:       make install

#
  package: openldap
  version: 2.6.1
           patch:        openldap-01.patch
           pre_config:   autoconf
           options:      --prefix=${prefix} \
                         --enable-dynamic   \
                         --disable-debug    \
                         --disable-slapd    \
                        CC=${gcc}           \
                        CFLAGS="-fpermissive -I${prefix}/include" \
                        LDFLAGS=-L${prefix}/lib
           build:       make depend
           build:       find ./ -name Makefile -exec sed -i -e "s@SOELIM=soelim@SOELIM=cat@g" {} \;
           build:       make -j ${num_proc}
           build:       make install

#
  package: curl
  version: 8.7.1 
           options:     --prefix=${prefix}        \
                        --with-openssl=${prefix}  \
                        CC=${gcc}                 \
                        LDFLAGS=-L${prefix}/lib 
           build:       make -j ${num_proc}
           build:       make install

#
  package: pcre2
  version: 10.44
           options:     --prefix=${prefix}              \
                        --enable-unicode                \
                        --enable-jit                    \
                        --enable-pcre2-16               \
                        --enable-pcre2-32               \
                        --enable-pcre2grep-libz         \
                        --enable-pcre2grep-libbz2       \
                        --enable-pcre2test-libreadline  \
                        CC=${gcc}                       \
                        CFLAGS="-I${prefix}/include"    \
                        LDFLAGS=-L${prefix}/lib 
           build:       make clean
           build:       make -j ${num_proc}
           build:       make install

#
  package: wget
  version: 1.25.0
           options:     --prefix=${prefix}           \
                        --with-linux-crypto          \
                        --with-ssl=openssl           \
                        --without-libgnutls-prefix   \
                        CC=${gcc}                    \
                        CFLAGS="-I${prefix}/include" \
                        LDFLAGS=-L${prefix}/lib 
           build:       make clean
           build:       make -j ${num_proc}
           build:       make install

#
  package: parallel
  version: 20230622
           options:     --prefix=${prefix}            \
                        --libdir=${prefix}/lib64      \
                        CCFLAGS="-I${prefix}/include" \
                        LDFLAGS="-L${prefix}/lib"     \
                        CC=${gcc}
           build:       make -j ${num_proc}
           build:       make install

#
  package: nasm
  version: 2.16.01
           options:     --prefix=${prefix}            \
                        CC=${gcc}                     \
                        CCFLAGS="-I${prefix}/include" \
                        LDFLAGS="-L${prefix}/lib"     
           build:       make -j ${num_proc}
           build:       make install

#
  package: libjpeg-turbo
  version: 3.0.1
           build:       if ( ! -d build_aux ) mkdir build_aux; cd build_aux
           build:       rm ${prefix}/lib/libjpeg*                  >& /dev/null
           build:       rm ${prefix}/lib/libturbo*                 >& /dev/null
           build:       rm ${prefix}/bin/wrjpgcom                  >& /dev/null
           build:       rm ${prefix}/bin/tjbench                   >& /dev/null
           build:       rm ${prefix}/bin/rdjpgcom                  >& /dev/null
           build:       rm ${prefix}/bin/jpegtran                  >& /dev/null
           build:       rm ${prefix}/bin/djpeg                     >& /dev/null
           build:       rm ${prefix}/bin/cjpeg                     >& /dev/null
           build:       rm ${prefix}/include/turbojpeg.h           >& /dev/null
           build:       rm ${prefix}/include/jpeglib.h             >& /dev/null
           build:       rm ${prefix}/include/jmorecfg.h            >& /dev/null
           build:       rm ${prefix}/include/jerror.h              >& /dev/null
           build:       rm ${prefix}/include/jconfig.h             >& /dev/null
           build:       rm ${prefix}/share/man/man1/wrjpgcom.1     >& /dev/null
           build:       rm ${prefix}/share/man/man1/rdjpgcom.1     >& /dev/null
           build:       rm ${prefix}/share/man/man1/jpegtran.1     >& /dev/null
           build:       rm ${prefix}/share/man/man1/djpeg.1        >& /dev/null
           build:       rm ${prefix}/share/man/man1/cjpeg.1        >& /dev/null
           build:       rm -fR ${prefix}/share/doc/libjpeg-turbo   >& /dev/null
           build:       rm ${prefix}/lib/pkgconfig/libjpeg.pc      >& /dev/null
           build:       rm ${prefix}/lib/pkgconfig/libturbojpeg.pc >& /dev/null
           build:       cmake -DCMAKE_INSTALL_PREFIX=${prefix} \
                              -DCMAKE_BUILD_TYPE=RELEASE    \
                              -DENABLE_STATIC=TRUE \
                              -DCMAKE_INSTALL_DEFAULT_LIBDIR=lib  \
                              -DCMAKE_C_COMPILER=${gcc} \
                              ..
           build:       make -j ${num_proc}
           build:       make install
           build:       install_name_tool -id ${prefix}/lib/libjpeg.62.dylib ${prefix}/lib/libjpeg.62.dylib
           build:       install_name_tool -change @rpath/libjpeg.62.dylib ${prefix}/lib/libjpeg.62.dylib ${prefix}/bin/cjpeg
           build:       install_name_tool -change @rpath/libjpeg.62.dylib ${prefix}/lib/libjpeg.62.dylib ${prefix}/bin/djpeg
           build:       install_name_tool -change @rpath/libjpeg.62.dylib ${prefix}/lib/libjpeg.62.dylib ${prefix}/bin/tjbench
           build:       install_name_tool -change @rpath/libjpeg.62.dylib ${prefix}/lib/libjpeg.62.dylib ${prefix}/bin/jpegtran

#
  package: libpng
  version: 1.6.37
           patch:       libpng-01.patch
           pre_config:  make distclean >& /dev/null ; set status = 0
           options:     --prefix=${prefix}            \
                        --with-zlib-prefix=${prefix}  \
                        --disable-static              \
                        CC=${gcc}                     \
                        CXX=${gcx}                    \
                        LDFLAGS=-L${prefix}/lib 
           build:       make -j ${num_proc}
           build:       make install

#
  package: libtirpc
  version: 1.3.2
           options:     --prefix=${prefix} \
                        --disable-gssapi   \
                        CC=${gcc}          \
                        CFLAGS="-fpermissive -D__APPLE_USE_RFC_3542 -D_GNU_SOURCE -D__USE_GNU -D__GLIBC__ -D mutex_t=pthread_mutex_t -D cond_t=pthread_cond_t -DINET6 -D SOL_IPV6=IPPROTO_IPV6 -D SOL_IP=IPPROTO_IP -D SO_PEERCRED=SO_PEERLABEL"
           build:       sed -i -e 's@<endian.h>@<machine/endian.h>@g' src/xdr_float.c
           build:       sed -i -e 's@\#include <unistd.h>@\#include <unistd.h>\nstruct ucred { pid_t pid; uid_t uid;	gid_t gid; };@g' src/getpeereid.c
           build:       sed -i -e 's@__linux__@_GNU_SOURCE@g' tirpc/reentrant.h
           build:       sed -i -e 's@am__append_2 =@\# am__append_2 =@g' src/Makefile
           build:       make -j ${num_proc} V=1
           build:       make install

#
  package: bison
  version: 3.8.2
           options:     --prefix=${prefix}     \
                        CC=${gcc}
           build:       make -j ${num_proc}
           build:       make install

#
  package: flex
  version: 2.6.4
           options:     --prefix=${prefix}     \
                        --enable-shared=no     \
                        --disable-shared       \
                        CC=${gcc}
           build:       make -j ${num_proc}
           build:       make install
           build:       rm ${prefix}/lib/libfl.s*
           build:       if ( -f ${prefix}/lib/libfl.la ) rm ${prefix}/lib/libfl.la

#
  package: hdf5
  version: 1.12.2
           pre_unpack:  if ( -f fortran/src/h5global.mod ) rm -fR fortran/src/
           options:     --prefix=${prefix} \
                        --enable-fortran \
                        --enable-cxx   \
                        CC=${gcc} \
                        CXX=${gcx} \
                        FC=${gfortran} \
                        FCFLAGS="-fbounds-check -fno-underscoring -fPIC" \
                        CFLAGS="-m64" \
                        CXXFLAGS="-m64"
           build:       make clean
           build:       make -j ${num_proc} V=1
           build:       make install

#
  package: hdf
  version: 4.2.16
           patch:        hdf-01.patch
           pre_config:   find ./ -name "*.c" -exec sed -i -e "s/NC_findattr/SD_NC_findattr/g"   {} \;
           pre_config:   find ./ -name "*.h" -exec sed -i -e "s/NC_findattr/SD_NC_findattr/g"   {} \;
           pre_config:   find ./ -name "*.c" -exec sed -i -e "s/NC_check_id/SD_NC_check_id/g"   {} \;
           pre_config:   find ./ -name "*.h" -exec sed -i -e "s/NC_check_id/SD_NC_check_id/g"   {} \;
           pre_config:   find ./ -name "*.c" -exec sed -i -e "s/NC_var_shape/SD_NC_var_shape/g" {} \;
           pre_config:   find ./ -name "*.h" -exec sed -i -e "s/NC_var_shape/SD_NC_var_shape/g" {} \;
           pre_config:   find ./ -name "*.c" -exec sed -i -e "s/nctypelen/sd_nctypelen/g"       {} \;
           pre_config:   find ./ -name "*.h" -exec sed -i -e "s/nctypelen/sd_nctypelen/g"       {} \;
           pre_config:   find ./ -name "*.c" -exec sed -i -e "s/SD_SD_NC/SD_NC/g"               {} \;
           pre_config:   find ./ -name "*.c" -exec sed -i -e "s/sd_sd_nc/SD_nc/g"               {} \;
           pre_config:   if ( `cat ${prefix}/bin/petools_vars | grep MK5_F95_NOOPT | grep fallow-argument-mismatch` != "" ) setenv HDF_EXTRA_OPT "-fallow-argument-mismatch"
           pre_config:   if ( `cat ${prefix}/bin/petools_vars | grep MK5_F95_NOOPT | grep fallow-argument-mismatch` == "" ) setenv HDF_EXTRA_OPT ""

           options:      --prefix=${prefix} \
                         --includedir=${prefix}/include/hdf \
                         --disable-netcdf \
                         --enable-fortran \
                         --with-jpeg=${prefix} \
                         CC=${gcc} \
                         F77=${gfortran} \
                         FFLAGS="-fbounds-check -fno-underscoring $HDF_EXTRA_OPT -fPIC -ltirpc" \
                         CFLAGS="-m64 -fPIC -I${prefix}/include/tirpc -L${prefix}/lib -ltirpc"

           post_config:  find ./ -name "Makefile"  -exec sed -i -e "s@ncgen dumper@dumper@g"    {} \;
           post_config:  find ./ -name "Makefile"  -exec sed -i -e "s@-ljpeg -lz @-ljpeg -lz -lm@g"  {} \;
#           post_config:  sed -i -e "s@-ljpeg -lz -lm@${prefix}/lib/libjpeg.a -lz -lm@g"  mfhdf/ncgen/Makefile
#           post_config:  sed -i -e "s@-ljpeg -lz -lm@${prefix}/lib/libjpeg.a -lz -lm@g"  mfhdf/ncdump/Makefile

           build:       make clean
           build:       make -j ${num_proc} V=1
           build:       make install
           build:       ${gcc} -fpic -shared -Wl,-force_load ${prefix}/lib/libdf.a                ${prefix}/lib/libjpeg.dylib   ${prefix}/lib/libz.dylib -o ${prefix}/lib/libdf.4.dylib -lgfortran
           build:       ${gcc} -fpic -shared -Wl,-force_load ${prefix}/lib/libmfhdf.a hdf/src/*.o ${prefix}/lib/libjpeg.dylib   ${prefix}/lib/libz.dylib -o ${prefix}/lib/libmfhdf.4.dylib -lgfortran
           build:       if ( -f ${prefix}/lib/libdf.dylib    )  rm ${prefix}/lib/libdf.dylib
           build:       if ( -f ${prefix}/lib/libmfhdf.dylib )  rm ${prefix}/lib/libmfhdf.dylib
           build:       ln -s ${prefix}/lib/libdf.4.dylib          ${prefix}/lib/libdf.dylib
           build:       ln -s ${prefix}/lib/libmfhdf.4.dylib       ${prefix}/lib/libmfhdf.dylib


#
  package: netcdf-c
  version: 4.9.2
           options:      --prefix=${prefix} \
                         --enable-shared \
                         --enable-netcdf-4 \
                         --enable-hdf4 \
                         --disable-dap \
                         --disable-pnetcdf \
                         CPPFLAGS="-I${prefix}/include -I${prefix}/include/hdf -I${prefix}/include/tirpc" \
                         LDFLAGS="-L${prefix}/lib -lhdf5 -lmfhdf -ldf -ljpeg -ltirpc -lgfortran" \
                         CC=${gcc} \
                         F77=${gfortran} \
                         FFLAGS="-fbounds-check -fno-underscoring -DNoUnderscoreAppend -fPIC"

            build:       make -j 1 
            build:       make install

#
  package: netcdf-fortran
  version: 4.6.1
           pre_unpack:   cd ${build_aux}; cd netcdf-c-`${prefix}/bin/nc-config --version | awk '{print $2}'`
           pre_unpack:   setenv ROOT_netcdf_fortran `pwd`
           post_unpack:  setenv ROOT_netcdf_fortran ${package}-${vers}
           options:      --prefix=${prefix} \
                  	 --enable-shared \
                         FC=${gfortran} \
                         F90=${gfortran} \
                         CC=${gcc} \
                  	 CPPFLAGS="-DNDEBUG -DpgiFortran -DNoUnderscoreAppend -I${prefix}/include" \
                  	 FFLAGS="-m64 -O3 -fPIC -fno-underscoring" \
                  	 F90FLAGS="-m64 -O3 -fPIC -fno-underscoring" \
                         FCFLAGS="-m64 -O3 -fPIC -fno-underscoring" \
                         LDFLAGS="-L${prefix}/lib" \
                         LIBS="-lgfortran"

           build:        make clean
           build:        make -j 1
           build:        make install

#
  package: w3lib
  version: 2.0.6
           patch:        w3lib-01.patch
           patch:        w3lib-02.patch
           build:        sed -i -e "s@F77     = gfortran@F77     = ${gfortran}@g" Makefile
           build:        sed -i -e "s@CC      = cc@CC     = ${gcc}@g" Makefile
           build:        if ( -f Makefile ) make clean
           build:        make -j ${num_proc}
           build:        ${gfortran}  --shared -Wl,-force_load  libw3.a -o ${prefix}/lib/libw3.1.dylib -lgfortran
           build:        if ( -f ${prefix}/lib/libw3.dylib ) rm ${prefix}/lib/libw3.dylib
           build:        ln -s ${prefix}/lib/libw3.1.dylib ${prefix}/lib/libw3.dylib

#
  package: fftw         
  version: 3.3.10     
           pre_config:  make distclean >& /dev/null ; set status = 0
           options:     --prefix=${prefix} \
                        --enable-openmp    \
                        --enable-shared    \
                        --enable-sse2      \
                        --enable-avx2      \
                        --enable-fma       \
                        CC=${gcc}          \
                        CFLAGS="-m64 -Ofast -fomit-frame-pointer -malign-double -fstrict-aliasing -fno-stack-protector -march=native" \
                        F77=${gfortran} \
                        FFLAGS="-m64 -fno-underscoring -Ofast -fomit-frame-pointer -malign-double -fstrict-aliasing -fno-stack-protector -march=native" \
           build:       make -j ${num_proc}
           build:       make install
           build:       make check >& double_check.log

#
  package: fftw          
  version: 3.3.10     
           pre_config:  make distclean >& /dev/null ; set status = 0
           options:     --prefix=${prefix}   \
                        --enable-single      \
                        --enable-openmp      \
                        --enable-shared      \
                        --enable-sse         \
                        --enable-avx2        \
                        --enable-avx-128-fma \
                        CC=${gcc} \
                        F77=${gfortran}
                        CFLAGS="-m64 -Ofast -fomit-frame-pointer -malign-double -fstrict-aliasing -fno-stack-protector -march=native"
                        FFLAGS="-m64 -fno-underscoring -Ofast -fomit-frame-pointer -malign-double -fstrict-aliasing -fno-stack-protector -march=native"
            build:      make -j ${num_proc}
            build:      make install
            build:      make check >& single_check.log

#
  package: openblas      
  version: 0.3.28
           pre_unpack:   if ( -d ${build_aux}/openblas-${vers} ) rm -fR ${build_aux}/openblas-${vers}
           post_unpack:  mv OpenBLAS-${vers}  openblas-${vers}
           post_unpack:  setenv ROOT_openblas openblas-${vers}
           patch:        openblas-01.patch
           options:      noconfigure
           build:        sed -i -e "s@_(@(@g" ctest/*.c
           build:        make NOUNDERSCORE=1                                            \
                         CC=${gcc}                                                      \
                         FC=${gfortran}                                                 \
                         COMMON_OPT="-D NOCHANGE -U NEEDBUNDERSCORE -D NOCHANGE -mavx2" \
                         FCOMMON_OPT="-fno-underscoring -fPIC"                          \
                         FFLAGS="-fopenmp -fno-underscoring -fPIC"                      \
                         USE_OPENMP=1                                                   \
                         CEXTRALIB=-lgomp
           build:   make PREFIX=${prefix} install

#
  package: qt
  version: 5.15.15
           pre_unpack:   if ( -d ${build_aux}/qt-${vers} ) rm -fR ${build_aux}/qt-${vers}
           post_unpack:  mv qt-everywhere-src-${vers} qt-${vers}
           post_unpack:  setenv ROOT_qt qt-${vers}
           patch:        qt5-01.patch
           options:      -prefix ${prefix}/qt5          \
                         -sysconfdir ${prefix}/etc/xdg  \
                         -confirm-license               \
                         -opensource                    \
                         -openssl-linked                \
                         -nomake examples               \
                         -qt-zlib                       \
                         -no-opengl                     \
                         -no-rpath                      \
                         -I${prefix}/include            \
                         -L${prefix}/lib                \
                          OPENSSL_LIBS="${prefix}/lib/libssl.dylib ${prefix}/lib/libcrypto.dylib"

           build:        sed -i 's/python /python3 /' qtdeclarative/qtdeclarative.pro
           build:        make -j ${num_proc}
           build:        make install
           build:        find ${prefix}/qt5 -name \*.prl -exec sed -i -e '/^QMAKE_PRL_BUILD_DIR/d' {} \;

#
  package: log2ant
  version: 0.8.3
           pre_unpack:  if ( -d ${build_aux}/log2ant-${vers} ) rm -fR ${build_aux}/log2ant-${vers}
           options:     --prefix=${prefix}          \
                        --with-qt-dir=${prefix}/qt5
           build:       make 
           build:       make install


#
  package: cfitsio      
  version: 4.4.0
           patch:       cfitsio-01.patch
           pre_config:  setenv CC ${gcc} ; setenv FC ${gfortran}; setenv CFORTRANFLAGS "-nus"; setenv CFLAGS "-DNoUnderscoreAppend"
           options:     --prefix=${prefix} \
                        --enable-reentrant \
                        --disable-curl     \
                        CC=${gcc}          \
                        FC=${gfortran}     \
                        CFLAGS="-m64 -DNoUnderscoreAppend -DINTEL_COMPILER"
           build:       if ( `uname` == "Darwin" ) \
                              sed -i -e "s|@rpath|${prefix}/lib|g" Makefile
           build:       make clean
           build:       make -j ${num_proc}
           build:       make install

#
# --- SGDASS maintained packages
#
[Packages]
  package: petools      
  version: 20241115
           options:     --prefix=${prefix}                       \
                        --with-blas="-L${prefix}/lib -lopenblas" \
                        --bits=64                                \
                        --with-zlib=${prefix}                    \
                        --with-png=${prefix}                     \
                        --with-readline=${prefix}                \
                        --with-ncurses=${prefix}                 \
                        --with-pgplot_tarball=${tarball}/pgplot5.2.tar.gz \
                        CC=${gcc}                                \
                        FC=${gfortran}
           build:       if ( -f Makefile ) make clean
           build:       make
	   build:       if ( `ps -eaf | grep ${prefix}/bin/pgxwin_server | grep -v grep` != "" ) killall -9 pgxwin_server
           build:       make install

#
  package: ners         
  version: 20210824
           options:     --prefix=${prefix}           \
                        --with-petools=${prefix}     \
                        --python-dir=${prefix}/script
           build:       if ( -f Makefile ) make clean
           build:       make
           build:       make install

#
  package: spd_client   
  version: 20241125
           post_unpack: if ( -f ${tarball}/spd_client_example-${vers}.tar.bz2 ) tar -jxf ${tarball}/spd_client_example-${vers}.tar.bz2
           options:     --prefix=${prefix}       \
                        --with-petools=${prefix} \
                        CC=${gcc}                \
                        FC=${gfortran}
           build:       if ( -f Makefile ) make clean
           build:       make
           build:       make install

#
  package: tle
  version: 20230331
           options:     --prefix=${prefix}          \
                        --with-petools=${prefix}    \
                        --with-ners=${prefix}       \
                        --with-spd_client=${prefix} \
                        --with-vtd=${prefix}        \
                        --with-cfitsio=${prefix}   
           build:       if ( -f Makefile ) make clean
           build:       make
           build:       make install

#
  package: vtd          
  version: 20241125
           options:     --prefix=${prefix}          \
                        --with-petools=${prefix}    \
                        --with-spd_client=${prefix} \
                        --with-cfitsio=${prefix}    \
                        --with-ners=${prefix}       \
                        --with-curl=${prefix}       \
                        --data=/vlbi/vtd_data
           build:       if ( -f Makefile ) make clean
           build:       make
           build:       make install

#
  package: gvh          
  version: 20231222
           options:     --prefix=${prefix}          \
                        --with-petools=${prefix}    \
                        --with-vtd=${prefix}        \
                        --with-ners=${prefix}
           build:       if ( -f Makefile ) make clean
           build:       make
           build:       make install

#
  package: fourpack     
  version: 20220220
           options:     --prefix=${prefix}          \
                        --with-petools=${prefix}    \
                        --with-fftw=${prefix}       \
                        --without-mkl
           build:       if ( -f Makefile ) make clean
           build:       make
           build:       make install

#
  package: vex_parser   
  version: 20210707
           options:     --prefix=${prefix}          \
                        --with-petools=${prefix}
           build:       if ( -f Makefile ) make clean
           build:       make
           build:       make install

#
  package: atp
  version: 20240507
           options:     --prefix=${prefix}          \
                        --with-petools=${prefix}    \
                        --with-ners=${prefix}       
           build:       if ( -f Makefile ) make clean
           build:       make
           build:       make install

#
  package: difmap
  version: 2.5o
           build_aux_dir: yes
           pre_unpack:    if ( -d ${build_aux}/difmap-${vers} ) rm -fR ${build_aux}/difmap-${vers}
           pre_unpack:    if ( -d ${build_aux}/difmap_${vers} ) rm -fR ${build_aux}/difmap_${vers}
           post_unpack:   setenv ROOT_difmap ${build_aux}/difmap-${vers}
	   post_unpack:   mv uvf_difmap_${vers} difmap-${vers}
           patch:         difmap-01.patch
           patch:         difmap-02.patch
	   pre_config:    grep   SOLVE_LIB_X11 ${prefix}/bin/petools_vars > x11_lib.csh
	   pre_config:    source x11_lib.csh
	   pre_config:    rm     x11_lib.csh
           options:       linux-ia64-gcc 
           build:         find ./ -name "*.o" -exec rm {} \;
           build:         sed -i -e 's@CFLAGS = $(OPT)@CFLAGS = -fpermissive $(OPT)@g' libtecla_src/Makefile
           build:         grep "CFLAGS =" libtecla_src/Makefile
           build:         ./makeall
           build:         cp difmap  ${prefix}/bin/difmap     

#           build:         sed -i -e 's@OPT="-O"@OPT="-O -fpermissive -I ${prefix}/include"@g' makeall
#
  package: psolve       
  version: 20241125
           options:     --prefix=${prefix}                  \
                        --with-petools=${prefix}            \
                        --with-cfitsio=${prefix}            \
                        --with-spd_client=${prefix}         \
                        --with-ners=${prefix}               \
                        --with-vtd=${prefix}                \
                        --with-gvh=${prefix}                \
                        --with-vex_parser=${prefix}         \
                        --scratch_data=/scr/psolve          \
                        --save_data=${prefix}/share/psolve  \
                        --gvf_data=/l2/gvf                  \
                        --center_abr=${center_abr}          \
                        --center_name=${center_name}        \
                        --ps_viewer=/usr/bin/open           \
                        --gif_viewer=/usr/bin/open          \
                        --scratch_pima=/scr/pima            \
                        --stp_dir=/cont/stp 
           build:       if ( -f Makefile ) make clean
           build:       make
           build:       make install

#
  package: pima         
  version: 20250107
           post_unpack: if ( ! -d ${prefix}/share/pima ) mkdir -m 775 ${prefix}/share/pima 
           options:     --prefix=${prefix}                    \
                        --with-petools=${prefix}              \
                        --with-vtd=${prefix}                  \
                        --with-spd_client=${prefix}           \
                        --with-gvh=${prefix}                  \
                        --with-fourpack=${prefix}             \
                        --with-cfitsio=${prefix}              \
                        --with-solve=${prefix}                \
                        --with-ners=${prefix}                 \
                        --with-difmap=${prefix}               \
                        --pima-fits=/tmp                      \
                        --pima-scratch=/scr/pima              \
                        --pima-exp-dir=/vlbi                  \
                        --stable-share=${prefix}/share/pima
           build:       if ( -f Makefile ) make clean
           build:       make
           build:       make install

#
  package: sur_sked
  version: 20240430
           options:     --prefix=${prefix}                    \
                        --with-petools=${prefix}              \
                        --with-vtd=${prefix}                  \
                        --with-cfitsio=${prefix}              \
                        --with-ners=${prefix} 
           build:       if ( -f Makefile ) make clean
           build:       make
           build:       make install

#
  package: vsdc
  version: 20240204
           options:     noconfigure
           build:       if ( -d __pycache__  ) rm -fR __pycache__
           build:       if ( ! -d /cont/vsdc ) mkdir 775 /cont/vsdc
           build:       ./vsdc_install.py  --prefix=${prefix} --config_dir=/cont --datacenter=CDDIS

#
  package: malo
  version: 20241125
           post_unpack: if ( -f ${tarball}/malo_share-${vers}.tar.bz2 ) tar -jxf ${tarball}/malo_share-${vers}.tar.bz2
           options:     --prefix=${prefix}              \
                        --with-petools=${prefix}        \
                        --with-cfitsio=${prefix}        \
                        --with-ners=${prefix}           \
                        --with-vtd=${prefix}            \
                        --with-fourpack=${prefix}       \
                        --with-spd_client=${prefix}     \
                        --with-netcdf=${prefix}         \
                        --with-hdf5=${prefix}           \
                        --with-hdf4=${prefix}           \
                        --with-w3=${prefix}             \
                        --with-fftw=${prefix}           \
                        --share=${prefix}/malo/share    \
                        --script=${prefix}/malo/script  \
                        --model=/imls/oper_model        \
                        --dev_model=/imls/devel_model

           build:       if ( -f Makefile ) make clean
           build:       make static
           build:       make shared
           build:       make install
           build:       make install_data

#
  package: spd
  version: 20241125
           post_unpack: if ( -f ${tarball}/spd_share-${vers}.tar.bz2 ) tar -jxf ${tarball}/spd_share-${vers}.tar.bz2
           options:     --prefix=${prefix}        \
                        --with-petools=${prefix}  \
                        --with-malo=${prefix}     \
                        --with-netcdf=${prefix}   \
                        --with-hdf4=${prefix}     \
                        --with-hdf5=${prefix}     \
                        --with-fourpack=${prefix} \
                        --with-vtd=${prefix}      \
                        --with-cfitsio=${prefix}  \
                        --with-ners=${prefix}
           build:       if ( -f Makefile ) make clean
           build:       make 
           build:       make install

#

[PostInstall]:

psolve:   psolve_reset AU 48000 48000

vtd:      ${prefix}/bin/vtd_apriori_update.py -c /vlbi/vtd_data/apr_update.conf

pima:     ${prefix}/bin/pima_fftw_plan_create.csh big all

malo:     ${prefix}/bin/malo_fftw_plan_create.csh
