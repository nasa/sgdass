# sgdass_config  Version 1.4   of 2021.12.13
#
# Space Geodesy Data Analysis Software Suite configuration file on astrogeo.org
# 
# Last update: 2021.09.14_14:25:59
#
[Directories]
  dir:  /apr         # for apriori data. ~100 Gb
  dir:  /dist        # for third-party package distributions 1-50 Gb
  dir:  /logs        # for logs
  dir:  /opt64       # installation directory /opt64/lib should be in the LD_LIBRARY_PATH or in /etc/ld.so.conf
  dir:  /progs       # for in-house software packages 1-10 Gb

[SubDirectories]:
  subdir: /apr/eop       # apriori Earth orientation paramers
  subdir: /apr/eph       # apriori ephemerides
  subdir: /apr/iono      # apriori ionosphere data
  subdir: /apr/load_bds  # apriori mass loading time series in bindisp format
  subdir: /apr/load_hps  # apriori mass loading harmonic variations
  subdir: /apr/psolve    # apriori files for psolve
  subdir: /apr/sou       # apriori source positions
  subdir: /apr/spd       # apriori station path delays
  subdir: /apr/sta       # apriori station positions
  subdir: /apr/temp      # apriori temporary files

[Compilers]
  gcc           /usr/bin/gcc
  gfortran      /usr/bin/gfortran

[Where]
 tarball        /progs/sgdass       # directory with unpacked sgdass tarballs
 build          /progs              # build directory the primary packages
 build_aux      /dist               # build directory for axilliary third party packages
 prefix         /opt64              # installation directory

[Misc]
  num_proc      64
  center_abr    NAS
  center_name  "NASA GSFC" 
  install_log   /logs/sgdass/sgdass_@DATE@_install.log
  build_log     /logs/sgdass/sgdass_@DATE@_build.log

[Tests]
  package: petools      
  version: 20241115
           options:     --prefix=${prefix}                       \
                        --with-blas="-L${prefix}/lib -lopenblas" \
                        --bits=64                                \
                        --with-readline=${prefix}                \
                        --with-ncurses=${prefix}                 \
                        --short-test                             \
                        CC=${gcc}                                \
                        FC=${gfortran}
           build:       echo "OK"

[AuxPackages]
  package: zlib
  version: 1.3.1
           options:     --prefix=${prefix}
           post_config: sed -i -e 's@cp $(SHAREDLIBV) $(DESTDIR)$(sharedlibdir);@cp $(SHAREDLIBV) $(DESTDIR)$(sharedlibdir)/$(SHAREDLIBV)__ ; mv $(DESTDIR)$(sharedlibdir)/$(SHAREDLIBV)__ $(DESTDIR)$(sharedlibdir)/$(SHAREDLIBV) ;@g' Makefile
           build:       make -j ${num_proc}
           build:       make install

  package: bzip2
  version: 1.0.8
           build:       sed -i -e "s@CC=gcc@CC=${gcc}@g"                   Makefile
           build:       sed -i -e "s@PREFIX=/usr/local@PREFIX=${prefix}@g" Makefile
           build:       sed -i -e "s@PREFIX=/usr@PREFIX=${prefix}@g"       Makefile
           build:       make -j ${num_proc}
           build:       make install

  package: lbzip2
  version: 2.5
           patch:       lbzip2.patch
           options:     --prefix=${prefix}           \
                        CC=${gcc}                    \
                        CFLAGS="-I${prefix}/include" \
                        LDLAGS="-I${prefix}/lib"     \
           build:       make -j ${num_proc}
           build:       make install

  package: ncurses
  version: 6.4
           options:     --prefix=${prefix} \
                        --with-shared \
                        --without-debug \
                        --without-ada \
                        --enable-overwrite \
                        CC=${gcc}
           build:       make -j ${num_proc}
           build:       make install

  package: readline
  version: 8.2
           options:     --prefix=${prefix} \
                        --with-curses      \
                        --disable-shared   \
                        CCFLAGS="-I${prefix}/include" \
                        LDFLAGS="-I${prefix}/lib"     \
                        CFLAGS="-m64 -fPIC"           \
                        CC=${gcc}
           build:       make -j ${num_proc}
           build:       make install

  package: curl
  version: 8.7.1
           options:     --prefix=${prefix} \
                        CC=${gcc}
           build:       make -j ${num_proc}
           build:       make install

#
  package: openblas      
  version: 0.3.28    
           post_unpack:  if ( -d ${build_aux}/openblas-${vers} ) rm -fR ${build_aux}/openblas-${vers}
           post_unpack:  mv OpenBLAS-${vers}  openblas-${vers}
           post_unpack:  setenv ROOT_openblas openblas-${vers}
           patch:        openblas_nous-${vers}.patch 
           build:        make NOUNDERSCORE=1                                            \
                         CC=${gcc}                                                      \
                         FC=${gfortran}                                                 \
                         COMMON_OPT="-D NOCHANGE -U NEEDBUNDERSCORE -D NOCHANGE -mavx2" \
                         FCOMMON_OPT="-fno-underscoring -fPIC"                          \
                         FFLAGS="-fopenmp -fno-underscoring -fPIC"                      \
                         USE_OPENMP=1                                                   \
                         CEXTRALIB=-lgomp
           build:   make PREFIX=${prefix} install

#
  package: cfitsio      
  version: 4.4.0
           patch:       cfitsio-01.patch
           pre_config:  setenv CC ${gcc} ; setenv FC ${gfortran}; setenv CFORTRANFLAGS "-nus"; setenv CFLAGS "-DNoUnderscoreAppend"
           options:     --prefix=${prefix} \
                        --enable-reentrant \
                        --disable-curl     \
                        CC=${gcc}          \
                        FC=${gfortran}     \
                        CFLAGS="-m64 -DNoUnderscoreAppend -DINTEL_COMPILER"
           build:       if ( `uname` == "Darwin" ) \
                              sed -i -e "s|@rpath|${prefix}/lib|g" Makefile
           build:       make clean
           build:       make -j ${num_proc}
           build:       make install


[Packages]
  package: petools      
  version: 20241115
           options:     --prefix=${prefix}                       \
                        --with-blas="-L${prefix}/lib -lopenblas" \
                        --bits=64                                \
                        --with-zlib=${prefix}                    \
                        --with-readline=${prefix}                \
                        --with-ncurses=${prefix}                 \
                        --with-pgplot_tarball=${tarball}/pgplot5.2.tar.gz \
                        CC=${gcc}                                \
                        FC=${gfortran}
           build:       if ( -f Makefile ) make clean
           build:       make
	   build:       if ( `ps -eaf | grep ${prefix}/bin/pgxwin_server | grep -v grep` != "" ) killall -9 pgxwin_server
           build:       make install

#
  package: ners         
  version: 20210824
           options:     --prefix=${prefix}           \
                        --with-petools=${prefix}     \
                        --python-dir=${prefix}/script
           build:       if ( -f Makefile ) make clean
           build:       make
           build:       make install

#
  package: spd_client   
  version: 20241125
           post_unpack: if ( -f ${tarball}/spd_client_example-${vers}.tar.bz2 ) tar -jxf ${tarball}/spd_client_example-${vers}.tar.bz2
           options:     --prefix=${prefix}       \
                        --with-petools=${prefix} \
                        CC=${gcc}                \
                        FC=${gfortran}
           build:       if ( -f Makefile ) make clean
           build:       make
           build:       make install

#
  package: vtd          
  version: 20241125
           options:     --prefix=${prefix}          \
                        --with-petools=${prefix}    \
                        --with-spd_client=${prefix} \
                        --with-cfitsio=${prefix}    \
                        --with-ners=${prefix}       \
                        --with-curl=${prefix}       \
                        --data=/vlbi/vtd_data
           build:       if ( -f Makefile ) make clean
           build:       make
           build:       make install
